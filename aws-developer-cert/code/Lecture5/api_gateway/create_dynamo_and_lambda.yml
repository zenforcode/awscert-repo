AWSTemplateFormatVersion: '2010-09-09'
Resources:
  PetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Pets
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: species
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: species
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt PetsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  GetPetsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetPetsFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          import boto3
          import json
          
          dynamo_db = boto3.resource('dynamodb')
          table = dynamo_db.Table('Pets')
          
          def handler(event, context):
              data = table.scan()
              return {
                  'statusCode': 200,
                  'body': json.dumps(data['Items'])
              }
      Environment:
        Variables:
          PETS_TABLE: !Ref PetsTable


